#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
 #自动编译：每天早上4点
  schedule:
    - cron: 0 20 * * *
  repository_dispatch:
  workflow_dispatch:
    inputs:
    
      CPU_SELECTION:
        description: 'CPU优选,增加编译速度'
        required: true
        default: '弃用E5系列'
        type: choice
        options:
          - '弃用E5系列'
          - '选择8370C'
          - '选择8272CL'
          - '选择8171M'    
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    name: 启动"${{ matrix.target }}-${{ github.event.inputs.REPO_BRANCH }}"触发编译
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    
    env:
      FOLDER_NAME: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [Lede]
        
        # 请勿对 target: [Lede] 做任何修改
        
    steps:


    - name: 读取脚本设置
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/281677160/common build/common
        mv -f build/common/*.sh build/${{ env.FOLDER_NAME }}/
        chmod -R +x build
        export SOURCE_CODE="$(source "build/${{ matrix.target }}/settings.ini" && echo ${SOURCE_CODE})"
        export INPUTS_INFORMATION_NOTICE="${{ github.event.inputs.INFORMATION_NOTICE }}"
        export INPUTS_REPO_BRANCH="${{ github.event.inputs.REPO_BRANCH }}"
        export INPUTS_CONFIG_FILE="${{ github.event.inputs.CONFIG_FILE }}"
        export INPUTS_UPLOAD_FIRMWARE="${{ github.event.inputs.UPLOAD_FIRMWARE }}"
        export INPUTS_UPLOAD_RELEASE="${{ github.event.inputs.UPLOAD_RELEASE }}"
        export INPUTS_CACHEWRTBUILD_SWITCH="${{ github.event.inputs.CACHEWRTBUILD_SWITCH }}"
        export INPUTS_UPDATE_FIRMWARE_ONLINE="${{ github.event.inputs.UPDATE_FIRMWARE_ONLINE }}"
        export INPUTS_PACKAGING_FIRMWARE="${{ github.event.inputs.PACKAGING_FIRMWARE }}"
        export INPUTS_COLLECTED_PACKAGES="${{ github.event.inputs.COLLECTED_PACKAGES }}"
        export INPUTS_CPU_SELECTION="${{ github.event.inputs.CPU_SELECTION }}"
        source build/${{ env.FOLDER_NAME }}/common.sh && settings_variable
        source build/${{ env.FOLDER_NAME }}/common.sh && Diy_menu1
        echo "${{ github.event.schedule }}"
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq install -y gawk git gettext libssl-dev xsltproc zip git-core wget curl grep python2.7 python3 python3-pip libpython3-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /${{ env.DIY_WORK }}
        sudo chown $USER:$GROUPS /${{ env.DIY_WORK }}
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 下载"${{ matrix.target }}"源码
      working-directory: /${{ env.DIY_WORK }}
      run: |
        git clone -b "${REPO_BRANCH}" --single-branch "${REPO_URL}" openwrt
        ln -sf /${{ env.DIY_WORK }}/openwrt ${GITHUB_WORKSPACE}/openwrt
        source ${GITHUB_WORKSPACE}/build/${{ env.FOLDER_NAME }}/common.sh && Diy_checkout
    
    - name: 公 告
      if: env.REPO_TOKEN
      run: |
        cd ${GITHUB_WORKSPACE}
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_menu2
 
    - name: 增加插件源
      if: env.REPO_TOKEN
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_menu3
 
    - name: 加载diy-part.sh文件
      if: env.REPO_TOKEN
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_zdypartsh
        source ${BUILD_PATH}/common.sh && Diy_Publicarea
        
    - name: 加载源、补丁和files文件夹
      if: env.REPO_TOKEN
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_menu4
    
    - name: SSH远程连接（制作.config配置文件）
      if: github.event.inputs.SSH_ACTION == 'true'
      uses: danshui-git/debugger-action@main

    - name: 生成"${{ matrix.target }}"配置文件
      if: env.REPO_TOKEN
      id: compile
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_menu5
        
    - name: 上传.config配置文件在 github actions
      if: steps.compile.outcome == 'success'
      uses: actions/upload-artifact@main
      with:
        name: .config_${{ env.SOURCE }}_${{ env.LUCI_EDITION }}_${{ env.TARGET_PROFILE }}_${{ env.Firmware_Date }}
        path: openwrt/build_logo/config.txt
        
    - name: 编译信息
      continue-on-error: true
      if: env.COMPILATION_INFORMATION == 'true'
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_xinxi
    
    - name: 清理Actions空间
      continue-on-error: true
      if: env.REPO_TOKEN
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: ${{ env.RETAIN_DAYS }}
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
